#!/usr/bin/env node

var
	program = require('commander'),
	pkg = require('../package.json'),
  colors = require('colors')
  ;

program
	.version(pkg.version);

program
	.command('generate <type> <name>')
	.description('Generate models, controllers and scaffold depending on your project settings')
	.action(function(type, name){
		require('./generate')(program, type, name);
	}).on('--help', function(){
		console.log('    $ sx generate model User name:string email:string'.yellow);
		console.log('    $ sx generate controller User'.yellow);
		console.log('    $ sx generate scaffold User'.yellow);
	});

function list(val){
  return val.split(',');
}

var
  spacing = "\n\t\t\t   * ",
  templates = ['atpl', 'coffeecup', 'dot', 'dust', 'eco', 'ect', 'ejs', 'haml', 'haml-coffee', 'handlebars', 'hogan', 'jade', 'jazz', 'jqtpl', 'JUST', 'liquor', 'mustache', 'QEJS', 'swig', 'templayed', 'toffee', 'underscore', 'walrus', 'whiskers'],
  frontend = [ 'ember', 'angular', 'backbone', 'knockback', 'marionette'],
  styles = ['stylus', 'sass', 'less'],
  databases = ['Firebird','MongoDB','MySQL','CouchDB','PostgreSQL','Redis','SQLite'],
  testing = ['mocha','jasmine','qunit','vows'],
  html = ['foundation','bootstrap','groundwork']
  ;

function format(item){
  return ("\n" + spacing + item.join(spacing) + "\n").yellow;
}

program
	.command('new <name>')
	.description('Create a new Socket Express app')
	.option('-c, --coffee', 'Set to output Coffeescript for generators'.yellow, true)
	.option('-t, --template <type>', "Set template types, separate by commas, can be one or more of:" + format(templates), list, ['jade'])
	.option('-f, --frontend <type>', 'Set front-end type, separate by commas, can be one or more of:' + format(frontend), list, ['jquery','angular'])
	.option('-s, --style <type>', 'Set CSS type, can be one or more, separate by commas' + format(styles), list, ['stylus'])
	.option('-d, --database <type>', 'Set database type, can be:' + format(databases), 'mongodb')
	.option('-t, --test <type>', 'Set testing framework, can be one of the following' + format(testing), 'mocha')
	.option('--html <type>', 'Set HTML framework, can be' + format(html), 'bootstrap')
	.action(function(name, options){
		console.log(('[*] Generating Socket Express application structure to "' + name + '"...').yellow);
    require('./new')(program, name, options);
	});

program
	.command('update')
	.description('Update the current app to the latest SX version')
	.option('-d, --dependencies', 'Update the dependencies as well', true)
	.action(function(options){
		console.log(('[*] Updating Socket Express application...').yellow);
    require('./update')(program, options);
	});

program
	.command('start')
	.description('Start the app')
	.option('-d, --development', 'Starts the server in development mode, and will hot swap files so you don\'t need to reload the server while writing your app', false)
	.action(function(){
    require('./start')();
	});


program.on('--help', function(){
	console.log('  Examples:');
	console.log('');
	console.log('    $ sx init app'.yellow);
	console.log('    $ sx init app --coffee --frontend ember'.yellow);
	console.log('    $ sx init app -f angular -d couchdb'.yellow);
	console.log('    $ sx init app --coffee --frontend ember'.yellow);
	console.log('');
	console.log('    $ sx generate model User name:string email:string'.yellow);
	console.log('    $ sx generate controller User'.yellow);
	console.log('    $ sx generate scaffold User'.yellow);
	console.log('');
});

program.on('*', function(){
  program.help();
});

program.parse(process.argv);

if (process.argv.length < 3) {
	program.help();
}
